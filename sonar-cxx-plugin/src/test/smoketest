#!/usr/bin/env python

#
# Automated smoke tests for a build of the Sonar C++ Community Plugin
#
# Preconditions:
#   - Download and install all Sonar version which
#     the plugin version has to support on your box
#   - adjust the global variables (SONAR_HOME, SONAR_VERSIONS etc.)
#     to fit your site
#   - optional: install colorama (using something like 'pip install colorama' )
#     to get colorized output

# Usage:
#   $ smoketest <path to .jar>
#

import os
import subprocess
import sys
import time
import urllib
from glob import glob
from shutil import copyfile
import re
import requests
import json

SONAR_HOME = "/home/wenns/sonar"
SONAR_VERSIONS = ["3.7.4", "4.0", "4.1.2", "4.2"]
SONAR_URL = "http://localhost:9000"
SCRIPT_TMPL = os.path.join(SONAR_HOME, "sonar-%s", "bin", "linux-x86-32", "sonar.sh")
LOGFILE_TMPL = os.path.join(SONAR_HOME, "sonar-%s", "logs", "sonar.log")
SONAR_PLUGINS_TMPL = os.path.join(SONAR_HOME, "sonar-%s", "extensions", "plugins")
SONAR_ERROR_RE = re.compile(".* ERROR .*")
SONAR_WARN_RE = re.compile(".* WARN .*")
INDENT = "    "
PROJECT_KEY = "smoketest_project1"
PROJECT_PATH = "resources/org/sonar/plugins/cxx/smoketest_project1"

EXP_MEASURES = {
    "ncloc": 52.0,
    "lines": 124.0,
    "files": 4.0,
    "directories": 3.0,
    "functions": 5.0,
    "comment_lines_density": 31.6,
    "comment_lines": 24.0,
    "duplicated_lines_density": 69.4,
    "duplicated_lines": 86,
    "duplicated_blocks": 2,
    "duplicated_files": 2,
    "complexity": 7,
    "function_complexity": 1.4,
    "violations": 12,
    "violations_density": 53.8,
    "coverage": 84.0,
    "line_coverage": 100.0,
    "branch_coverage": 50.0,
    "test_success_density": 60.0,
    "test_failures": 2.0,
    "test_errors": 0.0,
    "tests": 5.0
    }

RED = ""
GREEN = ""
RESET = ""
RESET_ALL = ""
BRIGHT = ""
try:
    import colorama
    colorama.init()
    RED = colorama.Fore.RED
    GREEN = colorama.Fore.GREEN
    RESET = colorama.Fore.RESET
    BRIGHT = colorama.Style.BRIGHT
    RESET_ALL = colorama.Style.RESET_ALL
except ImportError:
    pass


def test_bootup(plugin, version):
    print(BRIGHT + "\nRunning smoke test for Sonar %s" % version + RESET_ALL)

    if is_installed(version):
        cleanup(version)
        install_plugin(plugin, version)
        started = start_sonar(version)
        logsOK = checkSonarLogs(version)
        analysisFinishedOk = runAnalysis(version)
        resultingMetricsOk = checkMetrics()
        # installOK = checkPluginInstalled(version)
        stop_sonar(version)
        return all([started, logsOK, analysisFinishedOk, resultingMetricsOk])
    else:
        sys.stdout.write(INDENT + RED + "not available\n" + RESET)
        return False


def cleanup(version):
    sys.stdout.write(INDENT + "cleaning logs ... ")
    sys.stdout.flush()
    try:
        os.remove(sonarLogFile(version))
    except OSError:
        pass
    sys.stdout.write(GREEN + "OK\n" + RESET)


def is_installed(version):
    return os.path.exists(sonar_script(version))


def install_plugin(plugin, version):
    sys.stdout.write(INDENT + "copying jar ... ")
    sys.stdout.flush()
    for path in glob(os.path.join(SONAR_PLUGINS_TMPL % version, "sonar-cxx*.jar")):
        os.remove(path)
    copyfile(plugin, os.path.join(SONAR_PLUGINS_TMPL % version, os.path.basename(plugin)))
    sys.stdout.write(GREEN + "OK\n" + RESET)


def start_sonar(version):
    sys.stdout.write(INDENT + "starting Sonar ... ")
    sys.stdout.flush()
    now = time.time()

    rc = subprocess.call([sonar_script(version), "start"],
                         stdout=subprocess.PIPE)
    if rc != 0 or not wait_for_sonar(50, is_webui_up):
        sys.stdout.write(RED + "FAILED\n" + RESET)
        return False

    sys.stdout.write(GREEN + "OK, duration: %03.1f s\n" % (time.time() - now)
                     + RESET)
    return True


def stop_sonar(version):
    sys.stdout.write(INDENT + "stopping Sonar ... ")
    sys.stdout.flush()
    rc = subprocess.call([sonar_script(version), "stop"],
                         stdout=subprocess.PIPE)
    if rc != 0 or not wait_for_sonar(30, is_webui_down):
        sys.stdout.write(RED + "FAILED\n" + RESET)
        return False

    sys.stdout.write(GREEN + "OK\n" + RESET)
    return True


def sonar_script(version):
    return SCRIPT_TMPL % version


def sonarLogFile(version):
    return LOGFILE_TMPL % version


def wait_for_sonar(timeout, criteria):
    for _ in range(timeout):
        if criteria():
            return True
        time.sleep(1)
    return False


def is_webui_up():
    try:
        return urllib.urlopen(SONAR_URL).getcode() == 200
    except IOError:
        return False


def is_webui_down():
    try:
        urllib.urlopen(SONAR_URL)
        return False
    except IOError:
        return True


def usage():
    return "%s <path to plugin>" % os.path.basename(sys.argv[0])


def checkSonarLogs(version):
    sys.stdout.write(INDENT + "logs check ... ")
    sys.stdout.flush()
    badlines = []
    errors = warnings = 0
    try:
        with open(sonarLogFile(version), "r") as log:
            lines = log.readlines()
            errors = warnings = 0
            for line in lines:
                if isSonarError(line):
                    badlines.append(line)
                    errors += 1
                elif isSonarWarning(line):
                    badlines.append(line)
                    warnings += 1
        reslabel = (RED + "FAILED\n") if errors > 0 else (GREEN + "OK\n")
    except IOError, e:
        badlines.append(str(e) + "\n")
        reslabel = RED + "FAILED\n"

    sys.stdout.write(reslabel + RESET)

    if badlines:
        for line in badlines:
            sys.stdout.write(2*INDENT + line)

    summary_msg = "%i errors and %i warnings\n" % (errors, warnings)

    print(2*INDENT + len(summary_msg) * "-")
    print(2*INDENT + summary_msg)
    return errors == 0


def isSonarError(line):
    return SONAR_ERROR_RE.match(line)


def isSonarWarning(line):
    return SONAR_WARN_RE.match(line)


def runAnalysis(version):
    logfname = "analysis_%s.log" % version
    sys.stdout.write(INDENT + "running analysis (see %s) ... " % logfname)
    sys.stdout.flush()
    basedir = os.path.dirname(os.path.realpath(__file__))
    now = time.time()

    with open(logfname, "w") as logfile:
        rc = subprocess.call(["sonar-runner", "-X"],
                             cwd=os.path.join(basedir, PROJECT_PATH),
                             stdout=logfile, stderr=logfile)
    if rc == 0:
        label = GREEN + "OK, duration: %03.1f s\n" % (time.time() - now)
    else:
        label = RED + "FAILED\n"
        
    sys.stdout.write(label + RESET)
    
    return rc == 0


def diffDicts(d1, d2):
    rc = True
    difflist = []
    if d1 != d2:
        rc = False
        for k1, v1 in d1.iteritems():
            v2 = d2.get(k1, "<None>")
            if v1 != v2:
                difflist.append("%s %s/%s" % (k1, str(v1), str(v2)))
    return rc, ", ".join(difflist)


def checkMetrics():
    sys.stdout.write(INDENT + "checking resulting metrics ... ")
    sys.stdout.flush()

    rc = False
    try:
        r = requests.get(SONAR_URL + "/api/resources?resource=" + PROJECT_KEY + "&metrics="
                     + ",".join(EXP_MEASURES.keys()))
        gotMeasures = _toSimpleDict(json.loads(r.text)[0]["msr"])

        rc, diff = diffDicts(EXP_MEASURES, gotMeasures)
        label = (GREEN + "OK") if rc else (RED + "FAILED, diff: " + diff)
    except requests.exceptions.ConnectionError, e:
        label = RED + "FAILED, reason: " + str(e)
        
    sys.stdout.write(label + "\n" + RESET)

    return rc


def _toSimpleDict(measures):
    return {measure["key"]: measure["val"] for measure in measures}


if __name__ == "__main__":
    
    if len(sys.argv) != 2:
        print usage()
        sys.exit(-1)

    if is_webui_up():
        print "Sonar seems to be running, exit it first"
        sys.exit(-1)

    build = sys.argv[1]
    badversions = []
    goodversions = []
    for sonar_version in SONAR_VERSIONS:
        if test_bootup(build, sonar_version):
            goodversions.append(sonar_version)
        else:
            badversions.append(sonar_version)

    print
    print BRIGHT + "Summary:" + RESET_ALL
    print INDENT + "Tests succeded for: " + GREEN + ", ".join(goodversions) + RESET
    print INDENT + "Tests failed for: " + RED + ", ".join(badversions) + RESET

    sys.exit(len(badversions) == 0)
